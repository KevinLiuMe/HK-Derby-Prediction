import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns

file_path = 'race_results.csv'
dataset = pd.read_csv(file_path)

array = dataset.values
numeric_values = pd.to_numeric(array[:, 1], errors='coerce')

# Find indices where the conversion to float is successful
valid_indices = ~np.isnan(numeric_values)

# Remove rows based on the indices where conversion is not successful
array = array[valid_indices]

X = array[:, -1] 
y = array[:, 1]

indices_where_1 = np.where(y == '1')[0]
horse_races_dict = {}

for i in range(8, 15):
    previous_indices = None
    horse_races_dict[f'{i}_horse_Races'] = []
    
    for indices in indices_where_1:
        if previous_indices is not None and indices - previous_indices == i:
            horse_races_dict[f'{i}_horse_Races'].append(indices)
        previous_indices = indices
    
    #print(f'{i}_horse_Races:', horse_races_dict[f'{i}_horse_Races'])
    print(f'Number of elements in {i}_horse_Races:', len(horse_races_dict[f'{i}_horse_Races']))

#Find out the date range of the races
date_list = []
for dateurl in array[:, 0]:
    date_index = dateurl.find('RaceDate=')
    date_part = dateurl[date_index + len("RaceDate="):date_index + len("RaceDate=") + 10]
    date_list.append(date_part)

# Convert date strings to date objects with error handling
date_objects = []
for date in date_list:
    try:
        date_objects.append(datetime.strptime(date, '%Y/%m/%d').date())
    except ValueError:
        pass
        #print(f"Skipping invalid date: {date}")

# Find the maximum and minimum dates if there are valid dates
if date_objects:
    max_date = max(date_objects)
    min_date = min(date_objects)
    print("The Maximum Date of the dataset is:", max_date)
    print("The Minimum Date of the dataset is:", min_date)
else:
    print("No valid dates found.")

last_year_races = 0
this_year_races = 0
for dateurl in array[indices_where_1, 0]:
    year_index = dateurl.find('RaceDate=')
    year_part = dateurl[year_index + len("RaceDate="):year_index + len("RaceDate=") + 4]
    if year_part == '2024':
        this_year_races += 1
    if year_part == '2023':
        last_year_races += 1
#print(f'{last_year_races}' ' races took place last year')
#print(f'{this_year_races}' ' races took place this year')
        

# Find out where all the races took place
happy_valley_races = 0
sha_tin_races = 0
overseas_races = 0
for dateurl in array[indices_where_1, 0]:
    course_index = dateurl.find('Racecourse=')
    course_part = dateurl[course_index + len("Racecourse="):course_index + len("Racecourse=") + 2]
    if course_part == 'HV':
        happy_valley_races += 1
    elif course_part == 'ST':
        sha_tin_races += 1
    elif course_part == 'ci':
        overseas_races += 1
        #print(dateurl)
#print(f'{happy_valley_races}'' races was in Happy Valley')
#print(f'{sha_tin_races}'' races was in Sha Tin')
#print(f'{overseas_races}'' races was overseas')

# Use boolean indexing to keep only rows without 'overseas' in the URL
overseas_rows = np.array([False if 'overseas' in dateurl else True for dateurl in array[:, 0]])
array = array[overseas_rows]

# plot relationship between win odds and placement
df = pd.DataFrame(array)
tick_positions = np.arange(0, 150, 10)
tick_labels = [str(position) for position in tick_positions]
sns.lineplot(x=df.iloc[:, -1], y=df.iloc[:, 1], data=df)
plt.xticks(tick_positions, tick_labels)
plt.xlabel('Win Odds')
plt.ylabel('Final Placement')
plt.show()
#print(df.iloc[:,-1])

# plot relationship between win odds and winning
win_index_count = 0
win_index = []
for placing in df.iloc[:, 1]:
    win_index_count += 1
    if placing == '1':
        win_index.append(win_index_count)

win_odds = []
odds_index_count = 0
for element in df.iloc[:, -1]:
    odds_index_count += 1
    if odds_index_count in win_index:
        win_odds.append(element)

count_of_odds = {}
for odds in win_odds:
    odds = round(float(odds))
    if odds in count_of_odds:
        count_of_odds[odds] += 1
    else:
        count_of_odds[odds] = 1

data = pd.DataFrame(list(count_of_odds.items()), columns=['Win Odds', 'Count'])

sns.scatterplot(data=data, x='Win Odds', y='Count', marker='o')
plt.xlabel('Win Odds')
plt.ylabel('Win Counts')
plt.title('Relationship between Win Odds and Winning')
plt.show()
